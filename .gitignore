import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
  
@SuppressWarnings("serial")
public class ControlCircle extends JFrame {
  private JButton jbtLeft = new JButton("Left");
  private JButton jbtRight = new JButton("Right");
  private JButton jbtUp = new JButton("Up");
  private JButton jbtDown = new JButton("Down");
  private CirclePanel canvas = new CirclePanel();

    
  public ControlCircle() {
    JPanel panel = new JPanel(); // Use the panel to group buttons
    panel.add(jbtLeft);
    panel.add(jbtRight);
    panel.add(jbtUp);
    panel.add(jbtDown);
     
    this.add(canvas, BorderLayout.CENTER); // Add canvas to center
    this.add(panel, BorderLayout.SOUTH); // Add buttons to the frame 
      
    jbtLeft.addActionListener(new MoveLeftListener());
    jbtRight.addActionListener(new MoveRightListener());
    jbtUp.addActionListener(new MoveUpListener());
    jbtDown.addActionListener(new MoveDownListener());
  }
    
  /** Main method */
  public static void main(String[] args) {
    JFrame frame = new ControlCircle();
    frame.setTitle("ControlCircle");
    frame.setLocationRelativeTo(null); // Centre the frame
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(350, 350);
    frame.setVisible(true);
  } 
  
  class CirclePanel extends JPanel
  {
	  private int radius = 20;
	  private int x = 100;
	  private int y = 100;
	  
	  public void moveLeft()
	  {
		  if (x > 10)
		  {
			x = x - 10;
		  	repaint();
		  }
	  }
	  
	  public void moveRight()
	  {
		  if (x < (getWidth() - 50))
		  {
			  x = x + 10;
			  repaint();
		  }
	  }
	  
	  public void moveUp()
	  {
		  if (y > 10)
		  {
			y = y - 10;
		  	repaint();
		  }
	  }
	  
	  public void moveDown()
	  {
		  if (y < (getHeight() - 50))
		  {
			  y = y + 10;
			  repaint();
		  }
	  }
	  
	  protected void paintComponent(Graphics g) 
	  {
		  super.paintComponent(g);
		  g.drawOval(x, y,
				  2 * radius, 2 * radius);
	  }
  }
  
  private class MoveLeftListener implements ActionListener
  {
	 
	  public void actionPerformed(ActionEvent e)
	  {
		  canvas.moveLeft();
	  }
  }
  private class MoveRightListener implements ActionListener
  {
	  public void actionPerformed(ActionEvent e)
	  {
		  canvas.moveRight();
	  }
  }
  private class MoveUpListener implements ActionListener
  {
	  public void actionPerformed(ActionEvent e)
	  {
		  canvas.moveUp();
	  }
  }
  private class MoveDownListener implements ActionListener
  {
	  public void actionPerformed(ActionEvent e)
	  {
		  canvas.moveDown();
	  }
  }
}  
